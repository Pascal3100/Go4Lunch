plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'com.google.gms.google-services'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.7"
}


android {
    compileSdkVersion 31
    buildToolsVersion '30.0.3'
    defaultConfig {
        applicationId "fr.plopez.go4lunch"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        buildConfigField 'String', 'places_api_key', PLACES_API_KEY

        resValue 'string', 'maps_api_key', MAPS_API_KEY
    }

    testOptions {
        unitTests.returnDefaultValues = true

        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.0"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.test.ext:junit-ktx:1.1.3'
    implementation 'com.android.support:support-annotations:28.0.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'

    // WorkManager dependency
    implementation "androidx.work:work-runtime-ktx:2.7.1"

    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:1.2.1"

    // Constraint Layout
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    // annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.6.0"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:1.0.0"
    implementation "androidx.hilt:hilt-work:1.0.0"

    // ROOM section
    def room_version = "2.3.0"
    implementation("androidx.room:room-runtime:$room_version")
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$room_version")

    // Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$room_version")

    // Provides lifecycle and coroutines scopes
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0"

    //ViewModels delegation extensions for activity
    implementation 'androidx.activity:activity-ktx:1.4.0'

    //ViewModels delegation extensions for fragment
    implementation "androidx.fragment:fragment-ktx:1.4.0"

    // Facebook
    implementation 'com.facebook.android:facebook-login:5.15.3'
    implementation 'com.facebook.android:facebook-android-sdk:5.15.3'

    // Google
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.google.android.gms:play-services-auth:19.2.0'
    implementation 'com.google.android.gms:play-services-maps:18.0.0'
    implementation 'com.google.android.libraries.places:places:2.5.0'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:29.0.0')
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0" // Core
    implementation "com.squareup.retrofit2:converter-gson:2.9.0" // Converts JSON to POJO / POKO

    //OkHttp
    implementation('com.squareup.okhttp3:okhttp') { version { strictly '3.12.12'  } }
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'

    // Kotlin - Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0"

    implementation 'org.slf4j:slf4j-nop:1.7.25'

    // Unit Tests
    testImplementation("junit:junit:4.13.2")
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'io.mockk:mockk:1.12.0'
    testImplementation group: 'uk.co.jemos.podam', name: 'podam', version: '7.2.5.RELEASE'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0'
    debugImplementation 'androidx.fragment:fragment-testing:1.4.0'
    kaptTest("com.google.dagger:hilt-android-compiler:2.38.1")

    // Instrumented Tests
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.1-rc01'
    androidTestImplementation 'io.mockk:mockk-android:1.12.0'
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.38.1'
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:2.38.1")
}

// Jacoco don't work on gradle 7 version...
// open JaCoCo report after generation
def openReport(htmlOutDir) {
    final reportPath = "$htmlOutDir\\index.html"

    println "HTML Report: $reportPath"

    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $reportPath" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$reportPath" }
    } else if (os.isLinux()) {
        try {
            exec { commandLine 'xdg-open', "$reportPath" }
        } catch (Exception ignored) {
            if (localProperties.containsKey("linux-html-cmd")) {
                exec { commandLine properties.get("linux-html-cmd"), "$reportPath" }
            } else {
                println "'linux-html-cmd' property could not be found in 'local.properties'"
            }
        }
    }
}

// JaCoCo stuff
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def filesToAnalyze = [
            '**/*ViewModel.kt',
            '**/*Repository.kt'
    ]

    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        def htmlOutDir = layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile

        doLast {
            openReport htmlOutDir
        }

        reports {
            xml.enabled = true
            html {
                destination htmlOutDir
            }
        }

        getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
        getExecutionData().setFrom(files("${buildDir}/jacoco/test${variantName}UnitTest.exec"))

        getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, includes: filesToAnalyze))
    }
}